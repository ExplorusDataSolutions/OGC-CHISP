<div id="map" style="margin:2px 0 0"></div>
<div id="list-container">
	<table id="list" class="hide table table-striped table-bordered table-hover table-condensed">
		<thead></thead>
		<tbody></tbody>
	</table>
</div>
<script>
	jQuery(function($) {
		$('#map').parent().removeClass('container');

		$('#list').click(function(e) {
			if (e.target.tagName == 'TD') {
				var $tr = $(e.target).closest('tr'), id = $tr.attr('id');
				var marker = map.getLayerById(id);
				map.openPopup(id);
			}
			if ($(e.target).hasClass('btn-danger')) {
				var $tr = $(e.target).closest('tr'), $tbody = $tr.parent();
				var id = $tr.attr('id').replace(/marker_/, '');
				$tr.remove();
				if (!$tbody.children().length) {
					$tbody.closest('table').hide();
				}
				var marker = map.getLayerById(id);
				if (marker) {
					if (marker.isFromWFS()) {
						marker.setStatus('normal');
					} else {
						map.removeLayerById(id);
					}
				}
				map.closePopup(id);
				adjustHeight();
			}
			if ($(e.target).hasClass('btn-success')) {
				var $tr = $(e.target).closest('tr');
				var id = $tr.attr('id').replace(/marker_/, '');
				var marker = map.getLayerById(id);
				marker.subscribe(function(markers) {
					if (markers.length) {
						var bounds = new L.LatLngBounds();
						for (var i = 0, len = markers.length; i < len; i++) {
							markers[i].addTo(map);
							bounds.extend(markers[i].getLatLng());
						}
						map.fitBounds(bounds);
						$tr.find('.label').html('activated')//
						.removeClass('label-warning').addClass('label-success');
						$tr.find('.btn-success').closest('td').empty();
					} else {
						$tr.find('.label').html('invalid')//
						.removeClass('label-warning').addClass('label-important');
						$tr.find('.btn-success').closest('td').empty();
					}
				});
			}
		});

		function adjustHeight() {
			if ($('#list').find('tbody tr').length == 5) {
				$('#list-container').css('height', $('#list-container').height() + 'px');
				$('#list-container').css('overflow', 'auto');
			}
			var h = $('#list').is(':visible') ? $('#list-container').height() : 0;
			$('#map').css('height', $(window).height() - $('#map').position().top - 4 - h + 'px');
			//map && map._onResize();
		}

		adjustHeight();

		/**
		 * This is to remove the zoom limit of the whole map caused by the zoom limit
		 *  of a overlay layer for performance
		 */
		var Map = L.Map.extend({
			_limitZoom : function(zoom) {
				return zoom;
			},
			getLayerById : function(id) {
				return this._layers[id] || null;
			},
			removeLayerById : function(id) {
				return this.removeLayer(this._layers[id]);
			},
			openPopup : function(markerId) {
				var marker = this.getLayerById(markerId);
				var latlng = marker.getLatLng();
				var rows = ["Point #" + markerId];
				for (var key in marker.data) {
					rows.push(key + ' : ' + marker.data[key]);
				}
				var content = rows.join('<br />');

				this._popup || (this._popup = new L.Popup({
					markerId : markerId,
					offset : new L.Point(-3, -6),
				}));
				this._popup.setLatLng(latlng).setContent(content);
				L.Map.prototype.openPopup.call(this, this._popup);
			},
			closePopup : function(markerId) {
				if (markerId) {
					if (this._popup && this._popup.options.markerId == markerId) {
						return this.closePopup();
					} else {
						return this;
					}
				} else {
					return L.Map.prototype.closePopup.call(this);
				}
			},
			reproject : function(crs, point, zoom, unbounded) {
				crs = ( typeof crs === 'undefined' ? this.options.crs : crs);
				return crs.project(this.unproject(point, zoom, unbounded));
			},
		});

		/**
		 * Enable EPSG:4326 for csnStreamFlow layer
		 */
		var WMS = L.TileLayer.WMS.extend({
			getUrl : function() {
				return this._url;
			},
			onAdd : function(map) {
				var crs = this.options.crs || map.options.crs;
				delete this.wmsParams.crs;

				var projectionKey = parseFloat(this.wmsParams.version) >= 1.3 ? 'crs' : 'srs';
				this.wmsParams[projectionKey] = crs.code;

				L.TileLayer.prototype.onAdd.call(this, map);
			},
			getTileUrl : function(tilePoint, zoom) {// (Point, Number) -> String
				var map = this._map, //
				crs = this.options.crs, //
				tileSize = this.options.tileSize, //
				nwPoint = tilePoint.multiplyBy(tileSize), //
				sePoint = nwPoint.add(new L.Point(tileSize, tileSize)), //
				nw = map.reproject(crs, nwPoint, zoom, true), //
				se = map.reproject(crs, sePoint, zoom, true), //
				bbox = [nw.x, se.y, se.x, nw.y].join(','), //
				url = L.Util.template(this._url, {
					s : this._getSubdomain(tilePoint)
				});

				return url + L.Util.getParamString(this.wmsParams) + "&bbox=" + bbox;
			},
		});

		/**
		 * Customize the cluster marker size
		 */
		var MarkerClusterGroup = L.MarkerClusterGroup.extend({
			includes : [L.Mixin.Events],

			options : {
				maxClusterRadius : 50
			},
			_defaultIconCreateFunction : function(cluster) {
				var childCount = cluster.getChildCount();

				var c = ' marker-cluster-';
				if (childCount < 10) {
					c += 'small';
				} else if (childCount < 100) {
					c += 'medium';
				} else {
					c += 'large';
				}

				return new L.DivIcon({
					html : childCount,
					className : 'marker-cluster' + c,
					iconSize : new L.Point(12, 12)
				});
			},
			//Overrides L.MarkerClusterGroup.onAdd
			onAdd : function(map) {
				map._initPathRoot();
				L.DomEvent.on(map._pathRoot, 'click', this._onMouseClick, this);
				//L.DomEvent.on(map._pathRoot, 'mouseover', this._onMouseOver, this);

				L.MarkerClusterGroup.prototype.onAdd.apply(this, arguments);
			},
			_onMouseClick : function(e) {
				if (e.target.tagName == 'svg') {
					// click on map, to bubble
				} else {
					this._map.getLayerById(e.target.id).addToTable();
					L.DomEvent.stopPropagation(e);
				}
			},
			_onMouseOver : function(e) {
				if (e.target.tagName == 'path') {
					map.openPopup(e.target.id);
				}
			},
		});

		/**
		 * Customize the circle style
		 */
		CircleMarker = L.CircleMarker.extend({
			data : {},
			normalStyle : {
				radius : 5,
				weight : 2,
				color : '#00ffff',
				opacity : 1,
				fill : true,
				// For mouse easy to hover and click on
				fillOpacity : 0.1
			},
			pendingStyle : {
				radius : 5,
				weight : 2,
				color : '#00ffff',
				opacity : 1,
				fill : true,
				fillColor : '#FAA732',
				fillOpacity : 1
			},
			initialize : function(latlng, data) {
				this.data = data || {};
				L.CircleMarker.prototype.initialize.call(this, latlng, this.normalStyle);
			},
			setOpacity : function() {
			},
			_initPath : function() {
				L.CircleMarker.prototype._initPath.apply(this, arguments);
				this._path.id = L.Util.stamp(this);
			},
			_onMouseClick : function(e) {
				if (this._map.dragging && this._map.dragging.moved()) {
					return;
				}

				this._fireMouseEvent(e);
				//Disable this to enable bubble
				//L.DomEvent.stopPropagation(e);

				if (this.isFromWFS()) {
					this.setStatus('pending');
				}
			},
			isFromWFS : function() {
				return this.data && this.data.id;
			},
			setStatus : function(status) {
				if (status == 'pending') {
					this.setStyle(this.pendingStyle);
				} else if (status == 'normal') {
					this.setStyle(this.normalStyle);
				}
			},
			addToTable : function() {
				var id = L.Util.stamp(this);
				if ($('#marker_' + id).length) {
					return;
				}

				if ($('#list').find('thead tr').length == 0) {
					$('#list').css('font-size', '12px');
					$('#list').find('thead').append([//
					"<tr>", //
					"<th></th>", //
					"<th>#</th>", //
					"<th>gml:id</th>", //
					"<th>Location</th>", //
					"<th>Type</th>", //
					"<th>Name</th>", //
					"<th>Organisation Name</th>", //
					"<th>Watershed</th>", //
					"<th>Description</th>", //
					"<th>Status</th>", //
					"<th>Actions</th>", //
					"</tr>"//
					].join(''));
				}

				var latlng = this.getLatLng(), data = this.data;
				$('#list').find('tbody').prepend([//
				'<tr id="marker_' + id + '" class="row">', //
				'<td>' + id + '</td>', //
				'<td>' + (data.id || "") + '</td>', //
				'<td>' + latlng.lng.toFixed(7) + ' / ' + latlng.lat.toFixed(7) + '</td>', //
				'<td>poi</td>', //
				'<td>' + (data.name || '') + '</td>', //
				'<td>' + (data.organisationName || '') + '</td>', //
				'<td>' + (data.Watershed || '') + '</td>', //
				'<td>Point on *** Stream</td>', //
				'<td><span class="label label-warning">pending</span></td>', //
				'<td>', //
				' <button class="btn btn-mini btn-danger">Cancel</button>', //
				' <button class="btn btn-mini btn-success">Subscribe</button>', //
				'</td>', //
				'</tr>'].join(''));
				$('#list').slideDown("fast", function() {
					adjustHeight();
				});
			},
			subscribe : function(callback) {
				var latlng = this.getLatLng();
				var data = {
					REQUEST : "GetFeatureInfo",
					EXCEPTIONS : "application/vnd.ogc.se_xml",
					BBOX : map.getBounds().toBBoxString(),
					SERVICE : "WMS",
					QUERY_LAYERS : 'w_level',
					Layers : 'w_level',
					VERSION : '1.1.1',
					SRS : 'EPSG:4326',
					WIDTH : map.getSize().x,
					HEIGHT : map.getSize().y,
					y : latlng.lat,
					x : latlng.lng,
				};
				var kvp = [];
				for (var key in data) {
					kvp.push(key + '=' + data[key]);
				}
				var url = cdnStreamFLow.getUrl() + '?' + kvp.join('&');

				$.ajax({
					url : '/proxy',
					data : {
						url : url
					},
					success : function(xml, status, response) {
						var $response = $(xml).find('GetFeatureOfInterestResponse');
						var markers = [];
						$response.find('featureMember').each(function(index, element) {
							var pos = $(element).find('pos')[0].textContent.split(' ');
							var description = $(element).find('description')[0].textContent;
							markers.push(new L.Marker(pos));
						})
						$.isFunction(callback) && callback(markers);
					}
				});
			}
		});

		// Inital map location
		var map = new Map('map').setView([51, -110], 6);

		// Use MapBox as base layer
		var baseLayer = L.tileLayer(//
		'http://{s}.tiles.mapbox.com/v2/tesera.map-lmy2wpqu/{z}/{x}/{y}.png'//
		).addTo(map);

		// nhn:hydrography:hydro1m_l only display at zoom 9
		var overlay = new WMS("http://ows.geobase.ca/wms/geobase_en", {
			layers : 'nhn:hydrography:hydro1m_l',
			format : 'image/png',
			transparent : true,
			// force the layer only displayed at zoom level 9
			maxZoom : 9,
			minZoom : 9,
		}).addTo(map);

		var cdnStreamFLow = new WMS(//
		"http://ngwd-bdnes.cits.nrcan.gc.ca/service/ngwds/en/wms/ngwd-wms/ec_pilot_wms", {
			layers : 'w_level',
			format : 'image/png',
			version : '1.1.0',
			transparent : true,
			crs : L.CRS.EPSG4326,
		}).addTo(map);

		/**
		 * WMS query
		 */
		map.on('click', function(e) {
			new CircleMarker(e.latlng).addTo(this).addToTable();
		});

		$.ajax({
			url : '/proxy',
			data : {
				url : 'http://nwisvaws02.er.usgs.gov/ogc-swie/wfs?request=GetFeature&featureId=05113600,05114000,05116000,05116500,05117500,05120000,05120500,05121000,05121001,05122000,05123400,05123510,05124000,06133500,06135000,06139500,06140500,06142400,06151500,06154100,06154400,06155030,06155500,06164510,06166000,06167500,06169500,06172310,06174500',
			},
			dataType : 'xml',
			success : function(xml) {
				var markers = new MarkerClusterGroup();
				var bounds = new L.LatLngBounds();

				var point, data, name, value;
				$(xml).find('member').each(function(index, element) {
					point = $(element).find('pos').text().split(' ');
					data = {
						id : $(element).find('featureOfInterest').attr('gml:id'),
						name : $(element).find('name').text(),
						organisationName : $(element).find('CharacterString').text(),
					};
					$(element).find('NamedValue').each(function(index, element) {
						name = $(element).find('name').attr('xlink:title');
						value = $(element).find('value').text();
						data[name] = value;
					});
					markers.addLayer(new CircleMarker(point, data));

					bounds.extend(L.latLng(point));
				});

				map.addLayer(markers);
				map.setView(bounds.getCenter(), map.getBoundsZoom(bounds));
			}
		});

		$.ajax({
			url : '/proxy',
			data : {
				url : ['http://198.103.103.7/GinService/sos?', //
				'REQUEST=GetFeatureOfInterest', //
				'&VERSION=2.0.0', //
				'&SERVICE=SOS', //
				'&spatialFilter=om:featureOfInterest/*/sams:shape,-101.2,49,-99.5,50.1', //
				'&namespaces=xmlns(sams,http://www.opengis.net/samplingSpatial/2.0),xmlns(om,http://www.opengis.net/om/2.0']//
				.join('')
			},
			success : function(xml) {
				var point, markers = new MarkerClusterGroup();
				$(xml).find('featureMember').each(function(index, element) {
					point = $(element).find('pos').text().split(' ');
					markers.addLayer(new CircleMarker(point, {
						id : $(element).find('identifier').text(),
						name : $(element).find('description').text(),
					}));
				});

				map.addLayer(markers);
			}
		});

		$.ajax({
			url : '/proxy',
			data : {
				url : ['http://ngwd-bdnes.cits.nrcan.gc.ca:8080/proxy/GinService/sos/gw?', //
				'REQUEST=GetFeatureOfInterest', //
				'&VERSION=2.0.0', //
				'&SERVICE=SOS', //
				'&spatialFilter=om:featureOfInterest/*/sams:shape,-116,50.5,-114.3,51.6', //
				'&namespaces=xmlns(sams,http://www.opengis.net/samplingSpatial/2.0),xmlns(om,http://www.opengis.net/om/2.0)']//
				.join('')
			},
			success : function(xml) {
				var point, markers = new MarkerClusterGroup();
				$(xml).find('featureMember').each(function(index, element) {
					point = $(element).find('pos').text().split(' ');
					markers.addLayer(new CircleMarker(point, {
						id : $(element).find('identifier').text(),
						name : $(element).find('description').text(),
					}));
				});

				map.addLayer(markers);
			}
		});
	})
</script>
