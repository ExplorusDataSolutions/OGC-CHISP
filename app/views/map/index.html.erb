<div id="map" style="margin-top:2px"></div>
<div id="list-container" style="height:100px">
	<div id="list-wrapper">
		<table id="list-point" class="list-point table table-striped table-bordered table-hover table-condensed hide">
			<thead>
				<tr>
					<th class="f-id">#</th>
					<th class="f-chb">
					<div class="btn-group dropup">
						<button class="btn btn-mini">
							Actions
						</button>
						<button class="btn btn-mini dropdown-toggle" data-toggle="dropdown">
							<span class="caret"></span>
						</button>
						<ul class="dropdown-menu f-action">
							<li class="subscribe">
								<a href="#"><b>S</b>ubscribe</a>
							</li>
							<li class="cancel">
								<a href="#"><b>C</b>ancel</a>
							</li>
							<li class="update">
								<a href="#">Upd<b>a</b>te</a>
							</li>
							<li class="unsubscribe">
								<a href="#"><b>U</b>nsubscribe</a>
							</li>
						</ul>
					</div></th>
					<th class="f-show">Show</th>
					<th class="f-latlng">Location</th><th>Description</th><th class="f-status">Status</th>
					<th class="f-level">Level Threshold</th>
					<th class="f-flow">Flow Threshold</th>
					<th class="f-frequency">Frequency</th>
				</tr>
			</thead>
			<tbody>
				<tr class="row tpl hide">
					<td class="f-id"></td><td class="f-chb">
					<input type="checkbox" value="" />
					</td>
					<td class="f-show"><i class="icon-eye-open"></i></td>
					<td class="f-latlng"></td>
					<td class="f-poi-type"></td>
					<td class="f-status"><span class="label"></span></td>
					<td class="f-level"></td><td class="f-flow"></td><td class="f-frequency"></td>
				</tr>
			</tbody>
		</table>
	</div>
</div>
<div class="modal hide fade">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
			&times;
		</button>
		<h3>Subscription</h3>
	</div>
	<div class="modal-body">
		<form class="form-horizontal">
			<div class="control-group">
				<label class="control-label" for="inputEmail">Units</label>
				<div class="controls">
					<label class="radio inline">
						<input type="radio" name="unit" class="US" value="imperial" checked>
						Imperial</label>
					<label class="radio inline">
						<input type="radio" name="unit" class="CA" value="metric">
						Metric</label>
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="inputEmail">Email</label>
				<div class="controls">
					<input type="email" id="inputEmail" placeholder="your@email.com">
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="sw_level_threshold">Surface Water Level Threshold</label>
				<div class="controls">
					<div class="input-append">
						<input type="text" id="sw_level_threshold" pattern="^[-]?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$" required="">
						<span class="add-on unit"></span>
					</div>
					<span class="help-inline"></span>
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="sw_flow_threshold">Surface Flow Level Threshold</label>
				<div class="controls">
					<div class="input-append">
						<input type="text" id="sw_flow_threshold" pattern="^[-]?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$" required="">
						<span class="add-on unit"></span>
					</div>
					<span class="help-inline"></span>
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="frequency">Frequency</label>
				<div class="controls">
					<div class="input-append">
						<input type="text" id="frequency" pattern="^[-]?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?$" required="">
						<span class="add-on">minute</span>
					</div>
					<span class="help-inline"></span>
				</div>
			</div>
		</form>
	</div>
	<div class="modal-footer">
		<a href="javascript:void(0)" class="btn btn-close" data-dismiss="modal" aria-hidden="true">Cancel</a>
		<a href="javascript:void(0)" class="btn btn-primary">Subscribe</a>
	</div>
</div>
<script>
	jQuery('#map').parent().css('padding', '0px');

	jQuery(function($) {
		var appView = Backbone.View.extend({
			el : $("body"),
			events : {
				"mouseover #list-container" : "tableMouseOverDelegate",
				"mouseout #list-container" : "tableMouseOutDelegate",
				"click #list-container" : "tableClickDelegate",
				"click .modal .btn-primary" : "doSubscribe",
				"keydown" : "keydownHandler",
				"click .modal input[name=unit]" : "swapUnit",
			},
			keydownHandler : function(e) {
				if (e.altKey) {
					var actionsEnabled = !$('th.f-chb .dropdown-toggle').attr('disabled');
					var $ul = $('th.f-chb ul');
					switch(String.fromCharCode(e.keyCode)) {
						case 'S':
							if (actionsEnabled && $ul.find('.subscribe:not(.disabled)').length) {
								this.showSubscribeModal('New Subscription');
							}
							break;
						case 'A':
							if (actionsEnabled && $ul.find('.update:not(.disabled)').length) {
								actionsEnabled && this.showSubscribeModal('Update Subscription');
							}
							break;
						case 'C':
							if (actionsEnabled && $ul.find('.cancel:not(.disabled)').length) {
								actionsEnabled && this.cancelSubscribe();
							}
							break;
						case 'U':
							if (actionsEnabled && $ul.find('.unsubscribe:not(.disabled)').length) {
								actionsEnabled && this.cancelSubscribe();
							}
							break;
						default:
					}
				}
			},
			swapUnit : function(e) {
				var cls = e.target.className;
				if (cls == 'CA') {
					this.setCAUnit();
				} else if (cls == 'US') {
					this.setUSUnit();
				}
			},
			setCAUnit : function() {
				$('.modal input.CA').attr('checked', true);
				$('#sw_level_threshold + .unit').html('m');
				$('#sw_flow_threshold + .unit').html('m<sup>3</sup>/day');
			},
			setUSUnit : function() {
				$('.modal input.US').attr('checked', true);
				$('#sw_level_threshold + .unit').html('ft');
				$('#sw_flow_threshold + .unit').html('ft<sup>3</sup>/second');
			},
			loginedEmail : function() {
				var input = $('.navbar input[name=email]');
				return input.is(':hidden') && input.val();
			},
			tableMouseOverDelegate : function(e) {
				var $el = $(e.target).parent(), $rows = $('input.row:checked').closest('tr');
				if ($el.hasClass('subscribe')) {
					$rows.find('.active, .invalid').closest('tr').find('.f-chb input').attr('disabled', true);
				} else if ($el.hasClass('unsubscribe') || $el.hasClass('update')) {
					$rows.find('.label:not(.active)').closest('tr').find('.f-chb input').attr('disabled', true);
				} else if ($el.hasClass('cancel')) {
					$rows.find('.active').closest('tr').find('.f-chb input').attr('disabled', true);
				}
			},
			tableMouseOutDelegate : function(e) {
				var $el = $(e.target).parent(), $rows = $('input.row:checked').closest('tr');
				if ($el.hasClass('subscribe')) {
					$rows.find('.active, .invalid').closest('tr').find('.f-chb input').attr('disabled', false);
				} else if ($el.hasClass('unsubscribe') || $el.hasClass('update')) {
					$rows.find('.label:not(.active)').closest('tr').find('.f-chb input').attr('disabled', false);
				} else if ($el.hasClass('cancel')) {
					$rows.find('.active').closest('tr').find('.f-chb input').attr('disabled', false);
				}
			},
			tableClickDelegate : function(e) {
				var el = e.target, $el = $(el).parent();
				if ($el.closest('td').hasClass('f-show')) {
					var $tr = $el.closest('tr');
					var markerID = this.getMarkerIdByRow($tr);
					var marker = map.getLayerById(markerID);
					// Loading Soi marker here will be null
					marker && map.openMarkerPopup(marker);
				} else if (el.tagName == 'INPUT') {
					this.updateButtonStatus();
				} else if ($el.hasClass('unsubscribe') || $el.hasClass('cancel')) {
					this.cancelSubscribe(el);
					$el.closest('.btn-group').removeClass('open');
					return false;
				} else if ($el.hasClass('subscribe')) {
					this.showSubscribeModal('New Subscription');
					$el.closest('.btn-group').removeClass('open');
					return false;
				} else if ($el.hasClass('update')) {
					this.showSubscribeModal('Update Subscription');
					$el.closest('.btn-group').removeClass('open');
					return false;
				}
			},
			cancelSubscribe : function() {
				var poiIDs = [], markerIDs = [];
				$('input.row:visible:checked:not(:disabled)').each(function(index, input) {
					var markerID = input.value;
					var marker = map.getLayerById(markerID);
					// just avoid error
					if (marker && marker.data.poiID) {
						poiIDs.push(marker.data.poiID);
						markerIDs.push(markerID);
					} else {
						app.removeMarkerRow(markerID);
					}
				});
				if (poiIDs.length == 0) {
					return;
				}

				$.ajax({
					url : '/proxy',
					type : 'post',
					data : {
						url : "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=Unsubscribe&email=" + this.loginedEmail(),
						json : JSON.stringify(poiIDs),
					},
					dataType : 'json',
					success : function(json) {
						if (json.code == 'Success') {
							app.alert(json.message, 'success');
							for (var i = 0; i < markerIDs.length; i++) {
								app.removeMarkerRow(markerIDs[i]);
							}
						} else if (json.code == 'DataNofFound') {
							app.alert(json.message, 'warning');
						} else {
							app.alert('Unknown status', 'error');
						}
					},
					error : function(xhr, textStatus, e) {
						app.alert(textStatus || e, 'error');
					},
				});
			},
			showSubscribeModal : function(title) {
				$('#inputEmail').closest('.control-group')[this.loginedEmail() ? 'hide' : 'show']();
				$('.modal .modal-header h3').html(title);
				$('.modal input[name=unit]').attr('disabled', false);

				var defaultUnit = false;
				this.$selectedInputs = $('input.row:visible:checked:not(:disabled)');
				this.$selectedInputs.each(function(index, input) {
					var markerID = input.value;
					var marker = map.getLayerById(markerID);
					var layerName = marker.stationLayer ? marker.stationLayer.options.layerName : '';
					if (layerName == 'EC Surface Water') {
						$('.modal input[name=unit]').attr('disabled', true);
						app.setCAUnit();
						defaultUnit = true;
						return false;
					} else if (layerName == 'USGS Surface Water') {
						$('.modal input[name=unit]').attr('disabled', true);
						app.setUSUnit();
						defaultUnit = true;
						return false;
					}
				});

				defaultUnit == false && app.setUSUnit();
				$('.modal').modal('show');
			},
			$selectedInputs : null,
			doSubscribe : function() {
				var email = this.loginedEmail();
				if (email == '') {
					email = $('#inputEmail').val();
					if (email) {
						$.app.loginEmail(email);
						// login the email in the meantime
						$.get('/login.json', {
							email : email,
						});
					} else {
						return app.alert('Please leave your email', 'warning');
					}
				}

				$('#sw_level_threshold, #sw_flow_threshold, #frequency').each(function(index, input) {
					var g = $(input).closest('.control-group');
					if (!(new RegExp(input.pattern)).test(input.value)) {
						g.addClass('error').find('.help-inline').html(input.value ? '*Invalid number format' : '*required');
					} else {
						g.removeClass('error').find('.help-inline').html('');
					}
				});
				if ($('.modal .error').length) {
					return;
				}
				var data = [], markerIDs = [];
				this.$selectedInputs.each(function(index, input) {
					var markerID = input.value;
					var marker = map.getLayerById(markerID);
					var values = {};
					if (marker.data.poiType == 'P') {
						var latlng = marker.getLatLng();
						values = {
							email : email,
							sw_level_threshold : $('#sw_level_threshold').val(),
							sw_flow_threshold : $('#sw_flow_threshold').val(),
							frequency : $('#frequency').val(),
							poiType : 'P',
							lat : latlng.lat.toFixed(8),
							lng : latlng.lng.toFixed(8),
						};
					} else if (marker.data.poiType == 'S') {
						values = {
							email : email,
							sw_level_threshold : $('#sw_level_threshold').val(),
							sw_flow_threshold : $('#sw_flow_threshold').val(),
							frequency : $('#frequency').val(),
							poiType : 'S',
							stationID : marker.data.stationID,
						};
					}
					marker.data.poiID && (values.poiID = parseInt(marker.data.poiID));
					data.push(values);
					markerIDs.push(markerID);
				});
				if (data.length == 0) {
					return app.alert('No points selected', 'warning');
				}

				this.trigger('subscribe', data, markerIDs);
			},
			onMarkerHover : function(marker, hover) {
				var trID = 'poi_' + marker.data.poiID;
				var $tr = $('#' + trID)[hover ? 'addClass' : 'removeClass']('hover');
				if ($tr.length && hover) {
					$tr.find('td').highlight();
					var $tb = $tr.closest('table');
					var tr0_top = $tb.find('tbody tr:first').offset().top;
					var tr_top = $tr.offset().top;
					$container = $tb.parent();
					$container.animate({
						scrollTop : tr_top - tr0_top - 2 * $tr.outerHeight()
					}, {
						duration : 'slow',
						easing : 'swing'
					});
				}
			},
			removeMarkerRow : function(markerID) {
				var marker = map.getLayerById(markerID);
				map.closeMarkerPopup(markerID);
				marker.groupLayer.removeLayer(marker);

				var trID = 'poi_' + marker.data.poiID;
				var $tr = $('#' + trID);
				if ($tr.length == 0) {
					trID = 'marker_' + markerID;
					$tr = $('#' + trID);
				}
				var $tb = $('#list-point'), $td = $tb.find('td.f-action:visible');
				$tr.hide('slow', function() {
					$tr.remove();
					app.updateButtonStatus();
					$('#list-container').slideDown("slow", function() {
						app.adjustMapHeight();
					});
				});
			},
			showPoiRow : function(marker) {
				if (!app.loginedEmail()) {
					return;
				}

				var data = marker.data, poiID = data.poiID, trID = 'poi_' + poiID;
				var markerID = L.Util.stamp(marker), latlng = marker.getLatLng();
				var $tr = this.findOrAddRow(trID);

				$tr.find('.f-id').html(poiID);
				$tr.find('.f-latlng').html(latlng.lat.toFixed(8) + ', ' + latlng.lng.toFixed(8));
				$tr.find('.f-level').html(data.sw_level_threshold);
				$tr.find('.f-flow').html(data.sw_flow_threshold);
				$tr.find('.f-frequency').html(data.frequency);
				$tr.find('.f-poi-type').html('Point Of Interest');
				$tr.find('.f-chb input').val(markerID).attr('checked', $tr.find('.f-chb input').attr('checked') || !poiID);
				$tr.find('.f-status .label').html(this.statusText[data.status])//
				.removeClass().addClass(this.statusClass[data.status]);

				this.updateButtonStatus();

				$('#list-container').slideDown("fast", function() {
					app.adjustMapHeight();
				});
			},
			showSoiRow : function(data) {
				if (!this.loginedEmail()) {
					return;
				}

				var poiID = data.poiID, trID = 'poi_' + poiID;
				var $tr = this.findOrAddRow(trID);

				$tr.find('.f-id').html(poiID);
				$tr.find('.f-latlng').html('Loading...');
				$tr.find('.f-level').html(data.sw_level_threshold);
				$tr.find('.f-flow').html(data.sw_flow_threshold);
				$tr.find('.f-frequency').html(data.frequency);
				$tr.find('.f-poi-type').html('Station ID : ' + data.stationID);
				$tr.find('.f-chb input').attr('checked', $tr.find('.f-chb input').attr('checked') || !poiID);
				$tr.find('.f-status .label').html(this.statusText[data.status])//
				.removeClass().addClass(this.statusClass[data.status]);

				this.updateButtonStatus();

				$('#list-container').slideDown("fast", function() {
					app.adjustMapHeight();
				});
			},
			updateSoiRow : function(marker) {
				if (!this.loginedEmail()) {
					return;
				}

				var data = marker.data, poiID = data.poiID, trID = 'poi_' + poiID;
				var markerID = L.Util.stamp(marker), latlng = marker.getLatLng();

				var $tr = $('#' + trID);
				$tr.find('.f-latlng').html(latlng.lat.toFixed(8) + ', ' + latlng.lng.toFixed(8)).highlight();
				$tr.find('.f-chb input').val(markerID);
			},
			showNewPoiRow : function(marker) {
				var markerID = L.Util.stamp(marker), latlng = marker.getLatLng();
				var data = marker.data, trID = 'marker_' + markerID;
				var $tr = this.findOrAddRow(trID);

				$tr.find('.f-id').html('...');
				$tr.find('.f-latlng').html(latlng.lat.toFixed(8) + ', ' + latlng.lng.toFixed(8));
				$tr.find('.f-level, .f-flow, .f-frequency').html('');
				$tr.find('.f-poi-type').html('Point Of Interest');
				$tr.find('.f-chb input').val(markerID).attr('checked', true);
				$tr.find('.f-status .label').html(this.statusText[data.status])//
				.removeClass().addClass(this.statusClass[data.status]);

				this.updateButtonStatus();

				$('#list-container').slideDown("fast", function() {
					app.adjustMapHeight();
				});
			},
			updateNewPoiRow : function(markerID, data) {
				var marker = map.getLayerById(markerID);
				marker.setStatus(data.status);
				data = L.Util.extend(marker.data, data);

				var poiID = data.poiID, trID = 'marker_' + markerID;
				var $tr = this.findOrAddRow(trID);
				$tr.attr('id', 'poi_' + poiID);
				$tr.find('.f-id').html(poiID);
				$tr.find('.f-level').html(data.sw_level_threshold);
				$tr.find('.f-flow').html(data.sw_flow_threshold);
				$tr.find('.f-frequency').html(data.frequency);
				$tr.find('.f-status .label').html(this.statusText[data.status])//
				.removeClass().addClass(this.statusClass[data.status]);
				$tr.find('td:not(.f-action)').highlight(function() {
					$tr.find('.f-chb input').attr('checked', false);
					app.updateButtonStatus();
				});
			},
			showNewSoiRow : function(marker) {
				var markerID = L.Util.stamp(marker), latlng = marker.getLatLng();
				var data = marker.data, trID = 'marker_' + markerID;
				var $tr = this.findOrAddRow(trID);

				$tr.find('.f-id').html('...');
				$tr.find('.f-latlng').html(latlng.lat.toFixed(8) + ', ' + latlng.lng.toFixed(8));
				$tr.find('.f-level, .f-flow, .f-frequency').html('');
				$tr.find('.f-poi-type').html('Station ID : ' + data.stationID);
				$tr.find('.f-chb input').val(markerID).attr('checked', true);
				$tr.find('.f-status .label').html(this.statusText[data.status])//
				.removeClass().addClass(this.statusClass[data.status]);

				this.updateButtonStatus();

				$('#list-container').slideDown("fast", function() {
					app.adjustMapHeight();
				});
			},
			statusClass : {
				Selected : "label label-selected selected",
				Pending : "label label-warning pending",
				Valid : "label label-success active",
				Invalid : "label label-important invalid",
			},
			statusText : {
				Selected : "selected",
				Pending : "pending",
				Valid : "active",
				Invalid : "invalid",
			},
			findOrAddRow : function(trID) {
				var $tb = $('#list-point').show(), $tr = $('#' + trID);
				if ($tr.length == 0) {
					var tpl_html = $tb.find('tr.tpl').html();
					$tb.find('tbody').prepend('<tr id="' + trID + '">' + tpl_html + '</tr>');
					$tr = $('#' + trID);
					$tr.find('.f-chb input').addClass('row');
				}
				$tr.find('td').highlight();
				return $tr;
			},
			updateButtonStatus : function() {
				var $checkedRows = $('input.row:checked').closest('tr');
				$('.f-chb button').attr('disabled', $checkedRows.length == 0);
				var rowsToSubscribe = $checkedRows.find('.selected, .pending').length;
				$('.f-action .subscribe')[rowsToSubscribe == 0 ? 'addClass' : 'removeClass']('disabled');
				var rowsToUpdate = $checkedRows.find('.active').length;
				$('.f-action .unsubscribe')[rowsToUpdate == 0 ? 'addClass' : 'removeClass']('disabled');
				$('.f-action .update')[rowsToUpdate == 0 ? 'addClass' : 'removeClass']('disabled');
				var rowsToCancel = $checkedRows.find('.label:not(.active)').length;
				$('.f-action .cancel')[rowsToCancel == 0 ? 'addClass' : 'removeClass']('disabled');

				var cls = $('input.row:checked:first').closest('tr').find('.f-status .label').attr('class');
				$('input.row').closest('tr').find('.f-status .label[class!="' + cls + '"]').closest('tr')//
				.find('input.row').attr('disabled', !!cls);
			},
			adjustMapHeight : function() {
				var $tb = $('#list-point'), $wrapper = $('#list-wrapper');
				var $container = $('#list-container');
				var visibleRows = $tb.find('tbody tr:visible').length;
				visibleRows == 0 && $tb.hide();
				if (visibleRows >= 5) {
					if (!$tb[0]._fixed) {
						$tb.fixedHeaderTable({
							fixedColumn : true
						});
						$tb.parent().css('height', $tb.parent().height() + 'px')
						$headtb = $tb.parent().parent().find('.fht-thead .fht-table');
						$headtb.addClass('list-point table table-striped table-bordered table-hover table-condensed');
						$th2 = $headtb.find('th.f-frequency');
						$th = $tb.find('th.f-frequency');
						$th2.css('width', $th.outerWidth() - ($th2.outerWidth() - $th2.width()) + 'px');
						$tb.css('margin-top', 0 - $th.outerHeight() + 'px')
						$tb[0]._fixed = true;
					}
				} else {
					$wrapper.css('height', 'auto');
					$wrapper.css('overflow', 'none');
				}
				// 20 is for chrome bottom status area
				var h = $tb.is(':visible') ? $wrapper.height() : 0;
				$('#map').css('height', $(window).height() - $('#map').position().top - 4 - h + 'px');
			},
			getMarkerIdByRow : function(tr) {
				return $(tr).find('.f-chb input').val();
			},
			alert : function() {
				$.app && $.app.alert.apply(this, arguments);
			},
			syncMarkers : function() {
				app.stationLayers = app.stationLayers || [];
				app.markerLayer = app.markerLayer || null;

				if (this.stationPoints) {
					if (this.stationPoints.length) {
						app.stationPoints = this.stationPoints;
						app.markerLayer = this;
					}
					if (app.stationLayers.length) {
						for (var i = 0, layer; layer = app.stationLayers[i++]; ) {
							app.showStationMarkers(layer, app.stationPoints, app.markerLayer);
						}
					}
				} else {
					app.stationLayers.push(this);
					if (app.stationPoints) {
						app.showStationMarkers(this, app.stationPoints, app.markerLayer);
					}
				}
			},
			showStationMarkers : function(markerClusterLayer, stationData, markerLayer) {
				var latlng, _marker, style = markerLayer.options.style;
				for (var i = 0, row; row = stationData[i++]; ) {
					markerClusterLayer.eachLayer(function(marker) {
						if (marker.data.id == row.stationID) {
							latlng = marker.getLatLng();
							_marker = new CircleMarker(latlng, row, style);
							_marker.stationLayer = markerClusterLayer;
							app.updateSoiRow(_marker.addTo(markerLayer));
						}
					});
				}
			}
		});

		var app = new appView;
		app.adjustMapHeight();
		$.prototype.highlight = function(callback) {
			this.effect("highlight", {}, 3000, callback);
		}
		/**
		 * Map and controls
		 */
		var map = new Map('map', {
			onMarkerHover : app.onMarkerHover,
		}).setView([53, -100], 5);

		var bounds = new L.LatLngBounds([48.01835, -101.904947], [60.008292, -89.069706]);
		var layersControl = new LayersControl({}, {}, {
			collapsed : false
		}).addTo(map);

		/**
		 * Map layers
		 */
		// Use MapBox as base layer
		new TileLayer(//
		'http://{s}.tiles.mapbox.com/v3/tesera.map-1y5jmthi/{z}/{x}/{y}.png'//
		).addTo(map);

		// layer nhn:hydrography:hydro(1|2|10|20)m_l only display at zoom 5-9
		layersControl.addOverlay(new WMS("http://ows.geobase.ca/wms/geobase_en", {
			layers : 'nhn:hydrography:hydro20m_l,nhn:hydrography:hydro10m_l,nhn:hydrography:hydro2m_l,nhn:hydrography:hydro1m_l',
			format : 'image/png',
			transparent : true,
			maxZoom : 9,
			minZoom : 5,
		}).addTo(map), "Stream Segments");

		// layer Point Of Interest
		new MarkerGroup({
			style : {
				color : '#0266C8', // for svg marker and cluster marker
			},
			url : "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=GetUserSubscription",
			email : app.loginedEmail(),
			onClick : function() {
				var t0, t1, timer;
				return function(e) {
					var containerPoint = map.mouseEventToContainerPoint(e);
					var layerPoint = map.containerPointToLayerPoint(containerPoint);
					var latlng = map.layerPointToLatLng(layerPoint);
					var layer = this, style = layer.options.style;

					if (e.target.tagName == 'svg') {
						t0 = t1 || new Date, t1 = new Date, interval = t1.getTime() - t0.getTime();
						var timeout = 500;
						if (50 < interval && interval < timeout) {
							// a double click, cancel the previous click
							timer && clearTimeout(timer) == undefined && ( timer = null);
						} else {
							timer = setTimeout(function() {
								timer = null;
								app.showNewPoiRow(new CircleMarker(latlng, {
									poiType : 'P',
									status : 'Selected',
								}, style).addTo(layer));
							}, timeout);
						}
					} else if (e.target.tagName == 'path') {
						var markerID = e.target.id;
						var marker = map.getLayerById(markerID);
						if (marker.groupLayer == this) {
							app.showPoiRow(marker);
						} else {
							app.showNewSoiRow(new CircleMarker(marker.getLatLng(), {
								poiType : 'S',
								status : 'Selected',
								stationID : marker.data.id,
							}, style).addTo(layer));
						}
					}
				}
			}(),
			onEmailLogin : function() {
				$.app.on("login", function(email) {
					this.options.email = email;
					this.load();
				}, this);
			},
			onEmailLogout : function() {
				$.app.on("logout", function() {
					this.options.email = '';
					$('#list-point').find('tbody tr:visible').remove();
					app.adjustMapHeight();
					this.clearLayers();
				}, this);
			},
			onLoad : app.syncMarkers,
			onSubscribe : function() {
				app.on('subscribe', function(data, markerIDs) {
					$.ajax({
						url : '/proxy',
						type : 'post',
						data : {
							/**
							 * @see https://github.com/tesera/OGC-CHISP/wiki/GIS-FCU-Subscription-Broker-API
							 */
							url : "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=subscribe",
							json : JSON.stringify(data),
						},
						dataType : 'json',
						success : function(json) {
							$('.modal').modal('hide');
							if (json.code == 'RequestFormateError') {
								app.alert('Subscribe error', json.message, 'error');
							} else if (!json instanceof Array) {
								app.alert('Subscribe error', 'Unknown error', 'error');
							} else {
								var poiIDs = [];
								for (var i = 0, row; row = json[i]; i++) {
									app.updateNewPoiRow(markerIDs[i], row);
									poiIDs.push(row.poiID);
								}
								app.alert('Subscribe ' + poiIDs.join(',') + ' success', 'success');
							}
						},
						error : function(xhr, status, e) {
							$('.modal').modal('hide');
							app.alert('Subscribe error', status + ' : ' + e, 'error');
						},
						context : this,
					});
				}, this);
			},
			onPoiLoad : function(marker) {
				app.showPoiRow(marker);
			},
			onSoiLoad : function(data) {
				app.showSoiRow(data);
			},
			showMessage : function(msg, status) {
				app.alert('Point Of Interest :<br />' + msg, status);
			},
		}).addTo(map);

		// layer USGS Surface Water Stations
		layersControl.addOverlay(new MarkerClusterGroup({
			style : {
				color : '#00933B', // for svg marker and cluster marker
			},
			url : 'http://nwisvaws02.er.usgs.gov/ogc-swie/wfs?request=GetFeature&featureId=05113600,05114000,05116000,05116500,05117500,05120000,05120500,05121000,05121001,05122000,05123400,05123510,05124000,06133500,06135000,06139500,06140500,06142400,06151500,06154100,06154400,06155030,06155500,06164510,06166000,06167500,06169500,06172310,06174500',
			bounds : bounds,
			layerName : 'USGS Surface Water',
			elementTag : 'member',
			positionTag : 'pos',
			data : function(element) {
				var data = {
					id : $(element).find('featureOfInterest').attr('gml:id'),
					name : $(element).find('name').text(),
					organisationName : $(element).find('CharacterString').text(),
					type : 'USGS Surface Water',
				};
				$(element).find('NamedValue').each(function(index, element) {
					name = $(element).find('name').attr('xlink:title');
					value = $(element).find('value').text();
					data[name] = value;
				});

				return data;
			},
			onLoad : app.syncMarkers,
		}).addTo(map));

		// layer EC Surface Water Stations
		layersControl.addOverlay(new MarkerClusterGroup({
			style : {
				color : '#F2B50F', // for svg marker and cluster marker
			},
			url : ['http://198.103.103.7/GinService/sos?', //
			'REQUEST=GetFeatureOfInterest', //
			'&VERSION=2.0.0', //
			'&SERVICE=SOS', //
			'&spatialFilter=om:featureOfInterest/*/sams:shape,{bBoxString}', //
			'&namespaces=xmlns(sams,http://www.opengis.net/samplingSpatial/2.0),xmlns(om,http://www.opengis.net/om/2.0)']//
			.join(''),
			bounds : bounds,
			layerName : 'EC Surface Water',
			elementTag : 'featureMember',
			positionTag : 'pos',
			data : function(element) {
				return {
					id : $(element).find('identifier').text(),
					name : $(element).find('description').text(),
					type : 'EC Surface Water',
				};
			},
			onLoad : app.syncMarkers,
		}).addTo(map));
	}); 
</script>
