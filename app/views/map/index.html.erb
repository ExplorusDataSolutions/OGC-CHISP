<div id="map" style="margin-top:2px"></div>
<div id="list-container">
	<table id="list-point" class="table table-striped table-bordered table-hover table-condensed hide">
		<thead>
			<tr>
				<th>#</th><th>Location</th>
				<th>sw_level_threshold</th><th>sw_flow_threshold</th><th>freqency</th>
				<th>Description</th><th>Status</th>
				<th class="f-chb hide">
				<input type="checkbox" class="all" checked="checked" />
				</th>
				<th class="f-action"></th>
			</tr>
		</thead>
		<tbody>
			<tr class="row tpl hide">
				<td class="f-id"></td><td class="f-latlng"></td>
				<td class="f-level"></td><td class="f-flow"></td><td class="f-frequency"></td>
				<td class="f-poi-type"></td><td class="f-status"><span class="label"></span></td>
				<td class="f-chb hide">
				<input type="checkbox" checked="checked" value="" />
				</td>
				<td class="f-action">
				<button class="btn btn-mini btn-danger">
					Cancel
				</button>
				<button class="btn btn-mini btn-success hide">
					Subscribe
				</button></td>
			</tr>
		</tbody>
	</table>
</div>
<div class="modal hide fade">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal" aria-hidden="true">
			&times;
		</button>
		<h3></h3>
	</div>
	<div class="modal-body">
		<form class="form-horizontal">
			<div class="control-group">
				<label class="control-label" for="inputEmail">Email</label>
				<div class="controls">
					<input type="email" id="inputEmail" placeholder="your@email.com">
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="sw_level_threshold">Surface Water Level Threshold</label>
				<div class="controls">
					<input type="text" id="sw_level_threshold" placeholder="">
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="sw_flow_threshold">Surface Flow Level Threshold</label>
				<div class="controls">
					<input type="text" id="sw_flow_threshold" placeholder="">
				</div>
			</div>
			<div class="control-group">
				<label class="control-label" for="frequency">Frequency</label>
				<div class="controls">
					<input type="text" id="frequency" placeholder="">
				</div>
			</div>
		</form>
	</div>
	<div class="modal-footer">
		<a href="javascript:void(0)" class="btn btn-close" data-dismiss="modal" aria-hidden="true">Close</a>
		<a href="javascript:void(0)" class="btn btn-primary">Subscribe</a>
	</div>
</div>
<script>
	jQuery('#map').parent().css('padding', '0px');

	jQuery(function($) {
		var appView = Backbone.View.extend({
			el : $("body"),
			events : {
				"click #list-container" : "tableClickDelegate",
				"click .btn-primary" : "doSubscribe",
			},
			loginedEmail : function() {
				var input = $('.navbar input[name=email]');
				return input.is(':hidden') && input.val();
			},
			tableClickDelegate : function(e) {
				var el = e.target;
				if (el.tagName == 'TD' && el.className != 'f-action') {
					var $tr = $(el).closest('tr');
					var markerId = this.getMarkerIdByRow($tr);
					map.openMarkerPopup(markerId);
				} else if ($(el).hasClass('btn-danger')) {
					this.cancelSubscribe(el);
				} else if ($(el).hasClass('btn-success')) {
					if ($('input.row:checked').length == 0) {
						return this.alert("No POI selected", "error");
					}

					if (!this.loginedEmail()) {
						$('#inputEmail').closest('.control-group').show();
					} else {
						$('#inputEmail').closest('.control-group').hide();
					}
					var $tr = $(el).closest('tr');
					var $tb = $tr.closest('table');
					var id = this.getMarkerIdByRow($tr);
					$('#sw_level_threshold').val($tr.find('.f-level').html());
					$('#sw_flow_threshold').val($tr.find('.f-flow').html());
					$('#frequency').val($tr.find('.f-frequency').html());
					$('.modal h3').html($tb.attr('id') == 'list-point' ? 'Point Of Interest' : 'Station Of Interest');
					$('.modal').modal('show');
				} else if (el.tagName == 'INPUT') {
					if ($(el).hasClass('all')) {
						$('input.row').attr('checked', el.checked);
					} else if ($(el).hasClass('row')) {
						$('input.all').attr('checked', $('input.row:not(:checked)').length == 0);
					}
				}
			},
			cancelSubscribe : function(target) {
				var $tb = $(target).closest('table');
				var app = this;

				//var url = location.origin + "/GIS-SFU-cancel-subscribe"
				var url = "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=Unsubscribe"//
				+ "&email=" + this.loginedEmail();
				var url = location.origin;

				$.ajax({
					url : '/proxy',
					data : {
						url : url,
					},
					//dataType : 'json',
					success : function(json) {
						$tb.find('tbody tr').each(function(index, tr) {
							var id = app.getMarkerIdByRow(tr);
							var marker = map.getLayerById(id);
							if (marker) {
								marker.groupLayer.removeLayer(marker);
								$(tr).remove();
								map.closePopup(id);
							}
						});
						$tb.hide();
						app.adjustMapHeight();
					},
					error : function(xhr, textStatus, e) {
						typeof callback == 'function' && callback({
							error : textStatus || e
						});
					},
				});
			},
			doSubscribe : function() {
				var email = this.loginedEmail();
				if (email == '') {
					email = $('#inputEmail').val();
					if (email) {
						$.app.loginEmail(email);
						// login the email in the meantime
						$.get('/login.json', {
							email : email,
						});
					} else {
						return $.app.alert('Please leave your email', 'warning');
					}
				}
				var data = [], marker_ids = [];
				$('input.row:visible:checked').each(function(index, input) {
					var markerId = input.value;
					var marker = map.getLayerById(markerId);
					if (marker.data.poi_type == 'P') {
						var latlng = marker.getLatLng();
						data.push({
							email : email,
							sw_level_threshold : $('#sw_level_threshold').val(),
							sw_flow_threshold : $('#sw_flow_threshold').val(),
							frequency : $('#frequency').val(),
							poiType : 'P',
							lat : latlng.lat.toFixed(8),
							lng : latlng.lng.toFixed(8),
						});
					} else if (marker.data.poi_type == 'S') {
						data.push({
							email : email,
							sw_level_threshold : $('#sw_level_threshold').val(),
							sw_flow_threshold : $('#sw_flow_threshold').val(),
							frequency : $('#frequency').val(),
							poiType : 'S',
							stationID : marker.data.station_id,
						});
					}
					marker_ids.push(markerId);
				});
				if (data.length == 0) {
					return app.alert('No points selected', 'warning');
				}

				/**
				 * @see https://github.com/tesera/OGC-CHISP/wiki/GIS-FCU-Subscription-Broker-API
				 */
				var url = "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=subscribe"
				// A temporary substitution
				//var url = location.origin + "/GIS-SFU-subscribe"
				$.ajax({
					url : '/proxy',
					type : 'post',
					data : {
						url : url,
						json : JSON.stringify(data),
					},
					dataType : 'json',
					success : function(json) {
						$('.modal').modal('hide');
						if (json.code == 'RequestFormateError') {
							app.alert('Subscribe error', json.message, 'error');
						} else if (!json instanceof Array) {
							app.alert('Subscribe error', 'Unknown error', 'error');
						} else {
							var poi_ids = [];
							for (var i = 0, row; row = json[i]; i++) {
								var markerId = marker_ids[i];
								var marker = map.getLayerById(markerId);
								marker.setStatus(row.status);
								marker.data.poi_id = row.poiID;
								marker.data.poi_type = 'P';
								app.showMarkerInfoRow(marker);
								poi_ids.push(row.poiID);
							}
							app.alert('Subscribe ' + poi_ids.join(',') + ' success', 'success');
						}
					},
					error : function(xhr, status, e) {
						$('.modal').modal('hide');
						app.alert('Subscribe error', status + ' : ' + e, 'error');
					},
				});
			},
			showMarkerInfoRow : function(marker) {
				var markerId = L.Util.stamp(marker);
				var latlng = marker.getLatLng(), data = marker.data;

				var $tb = $('#list-point'), $tr = this.getRowByMarkerId(markerId);
				if ($tr.length == 0) {
					//if (falsedata.poi_type == 'S') {
					//	$tb = $('#list-station');
					//} else if (data.poi_type == 'P') {
					rows = $tb.find('tbody tr:visible').length;
					rows >= 1 && $tb.find('tbody tr:first .f-action').remove();
					$tb.show().find('tbody').prepend(//
					'<tr id="marker_' + markerId + '">' + $tb.find('tr.tpl').html() + '</tr>');
					data.status == 'Selected' && $('.f-chb').show();
					//}
					//$tb.prependTo($tb.parent());
					$tr = this.getRowByMarkerId(markerId);
					$tr.find('.f-chb input').addClass('row');
					$tr.find('.f-action').attr('rowspan', rows + 1);
				}

				$tr.find('.f-id').html(data.poi_id || markerId);
				$tr.find('.f-latlng').html(latlng.lng.toFixed(8) + ' / ' + latlng.lat.toFixed(8));
				$tr.find('.f-level').html(data.sw_level_threshold || '');
				$tr.find('.f-flow').html(data.sw_flow_threshold || '');
				$tr.find('.f-frequency').html(data.frequency || '');
				$tr.find('.f-poi-type').html(data.poi_type == 'P'//
				? 'Point Of Interest' : data.poi_type == 'S' ? 'Station Of Interest' : '');
				$tr.find('.f-chb input').val(markerId);
				$tr.find('.f-status .label').html(data.status)//
				.removeClass().addClass(this.statusClass[data.status] || '');
				if (data.status == 'Selected') {
					$tr.find('.f-action .btn-success').show();
				} else {
					$tr.find('.f-chb input').hide();
				}
				$tb.find('input.row:visible').length == 0 && $('.f-chb').hide();
				$tb.find('.label-selected').length == 0 && $tr.find('.f-action .btn-success').hide();

				$('#list-container').slideDown("fast", function() {
					app.adjustMapHeight();
				});
			},
			statusClass : {
				Selected : "label label-selected",
				Pending : "label label-warning",
				Valid : "label label-success",
				Invalid : "label label-important",
			},
			adjustMapHeight : function() {
				if ($('#list-station, #list-point').find('tbody tr').length >= 5) {
					$('#list-container').css('height', $('#list-container').height() + 'px');
					$('#list-container').css('overflow', 'auto');
				} else {
					$('#list-container').css('height', 'auto');
					$('#list-container').css('overflow', 'none');
				}
				var h = $('#list-container').is(':visible') ? $('#list-container').height() : 0;
				$('#map').css('height', $(window).height() - $('#map').position().top - 4 - h + 'px');
			},
			getMarkerIdByRow : function(tr) {
				return $(tr).attr('id').replace(/marker_/, '');
			},
			getRowByMarkerId : function(markerId) {
				return $('#marker_' + markerId);
			},
			alert : function() {
				$.app && $.app.alert.apply(this, arguments);
			},
			syncMarkers : function() {
				app.quene = app.quene || [];
				app.stationLayers = app.stationLayers || [];
				app.markerLayer = app.markerLayer || null;

				if (this.stationPoints) {
					if (this.stationPoints.length) {
						app.stationPoints = this.stationPoints;
						app.markerLayer = this;
					}
					if (app.stationLayers.length) {
						for (var i = 0, layer; layer = app.stationLayers[i++]; ) {
							app.showStationMarkers(layer, app.stationPoints, app.markerLayer);
						}
					}
				} else {
					if (app.stationPoints) {
						app.showStationMarkers(this, app.stationPoints, app.markerLayer);
					} else {
						app.stationLayers.push(this);
					}
				}
			},
			showStationMarkers : function(layer, points, markerLayer) {
				var marker, latlng;
				for (var i = 0, point; point = points[i++]; ) {
					layer.eachLayer(function(marker) {
						if (marker.data.id == point.stationID) {
							latlng = marker.getLatLng();
							app.showMarkerInfoRow(new CircleMarker(latlng, {
								poi_id : point.poiID,
								poi_type : point.poiType,
								status : point.status,
								station_id : point.stationID,
							}, markerLayer.options.style).addTo(markerLayer));
						}
					});
				}
			}
		});

		var app = new appView;
		app.adjustMapHeight();

		/**
		 * Map and controls
		 */
		var map = new Map('map').setView([53, -100], 5);
		var bounds = new L.LatLngBounds([48.01835, -101.904947], [60.008292, -89.069706]);
		var layersControl = new LayersControl({}, {}, {
			collapsed : false
		}).addTo(map);
		var drawControl = new Draw().addTo(map);

		/**
		 * Map layers
		 */
		// Use MapBox as base layer
		new TileLayer(//
		'http://{s}.tiles.mapbox.com/v3/tesera.map-1y5jmthi/{z}/{x}/{y}.png'//
		).addTo(map);

		// layer nhn:hydrography:hydro(1|2|10|20)m_l only display at zoom 5-9
		layersControl.addOverlay(new WMS("http://ows.geobase.ca/wms/geobase_en", {
			layers : 'nhn:hydrography:hydro20m_l,nhn:hydrography:hydro10m_l,nhn:hydrography:hydro2m_l,nhn:hydrography:hydro1m_l',
			format : 'image/png',
			transparent : true,
			maxZoom : 9,
			minZoom : 5,
		}).addTo(map), "Stream Segments");

		// layer Point Of Interest
		layersControl.addOverlay(new MarkerGroup({
			style : {
				color : '#0266C8', // for svg marker and cluster marker
			},
			//url : location.origin + '/GIS-SFU-subscription.json',
			url : "http://140.134.48.13/WNS/Broker/RegisterInfo.ashx?op=GetUserSubscription",
			email : app.loginedEmail(),
			onClick : function() {
				var t0, t1, timer;
				return function(e) {
					var containerPoint = map.mouseEventToContainerPoint(e);
					var layerPoint = map.containerPointToLayerPoint(containerPoint);
					var latlng = map.layerPointToLatLng(layerPoint);
					var layer = this, style = layer.options.style;

					if (e.target.tagName == 'svg') {
						t0 = t1 || new Date, t1 = new Date, interval = t1.getTime() - t0.getTime();
						var timeout = 500;
						if (50 < interval && interval < timeout) {
							// a double click, cancel the previous click
							timer && clearTimeout(timer) == undefined && ( timer = null);
						} else {
							timer = setTimeout(function() {
								timer = null;
								app.showMarkerInfoRow(new CircleMarker(latlng, {
									poi_type : 'P',
									status : 'Selected',
								}, style).addTo(layer));
							}, timeout);
						}
					} else if (e.target.tagName == 'path') {
						var markerId = e.target.id;
						var marker = map.getLayerById(markerId);
						if (marker.groupLayer == this) {
							app.showMarkerInfoRow(marker);
						} else {
							app.showMarkerInfoRow(new CircleMarker(latlng, {
								poi_type : 'S',
								status : 'Selected',
								station_id : marker.data.id,
							}, style).addTo(layer));
						}
					}
				}
			}(),
			onEmailLogin : function() {
				$.app.on("login", function(email) {
					this.options.email = email;
					this.load();
				}, this);
			},
			onLoad : app.syncMarkers,
			onMarkerAdded : function(marker) {
				app.showMarkerInfoRow(marker);
			},
			showMessage : function(msg, status) {
				app.alert('Point Of Interest :<br />' + msg, status);
			},
		}).addTo(map), "Point Of Interest");

		// layer USGS Surface Water Stations
		layersControl.addOverlay(new MarkerClusterGroup({
			style : {
				color : '#00933B', // for svg marker and cluster marker
			},
			url : 'http://nwisvaws02.er.usgs.gov/ogc-swie/wfs?request=GetFeature&featureId=05113600,05114000,05116000,05116500,05117500,05120000,05120500,05121000,05121001,05122000,05123400,05123510,05124000,06133500,06135000,06139500,06140500,06142400,06151500,06154100,06154400,06155030,06155500,06164510,06166000,06167500,06169500,06172310,06174500',
			bounds : bounds,
			elementTag : 'member',
			positionTag : 'pos',
			data : function(element) {
				var data = {
					id : $(element).find('featureOfInterest').attr('gml:id'),
					name : $(element).find('name').text(),
					organisationName : $(element).find('CharacterString').text(),
					type : 'USGS Surface Water',
				};
				$(element).find('NamedValue').each(function(index, element) {
					name = $(element).find('name').attr('xlink:title');
					value = $(element).find('value').text();
					data[name] = value;
				});

				return data;
			},
			onLoad : app.syncMarkers,
		}).addTo(map), "USGS Surface Water");

		// layer EC Surface Water Stations
		layersControl.addOverlay(new MarkerClusterGroup({
			style : {
				color : '#F2B50F', // for svg marker and cluster marker
			},
			url : ['http://198.103.103.7/GinService/sos?', //
			'REQUEST=GetFeatureOfInterest', //
			'&VERSION=2.0.0', //
			'&SERVICE=SOS', //
			'&spatialFilter=om:featureOfInterest/*/sams:shape,{bBoxString}', //
			'&namespaces=xmlns(sams,http://www.opengis.net/samplingSpatial/2.0),xmlns(om,http://www.opengis.net/om/2.0)']//
			.join(''),
			bounds : bounds,
			type : 'EC Surface Water',
			elementTag : 'featureMember',
			positionTag : 'pos',
			data : function(element) {
				return {
					id : $(element).find('identifier').text(),
					name : $(element).find('description').text(),
					type : 'EC Surface Water',
				};
			},
			onLoad : app.syncMarkers,
		}).addTo(map), "EC Surface Water");
	}); 
</script>
